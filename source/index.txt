=======================
MongoDB Performance Q&A
=======================

.. default-domain:: mongodb

*St. Louis MongoDB User Group, March 2014*

:presenter: Sam Kleinman
:company: MongoDB
:slides: http://tychoish.net/stl-mug-201403/slides

.. :link: http://tychoish.net/stl-mug-201403/

Overview
--------

- :ref:`Query Analysis <query-analysis>`
- :ref:`Indexing <indexing>`
- :ref:`Disks and filesystems <other-factors>`
- :ref:`Architecture <sharded-clusters>`
- :ref:`More Questions <more-questions>`

.. _query-analysis:

Query Analysis
--------------

``.explain()``
~~~~~~~~~~~~~~

:method:`explain() <cursor.explain>` on cursor objects.

Runs a query to determine how MongoDB *would* execute the query, and
reports the winning query plan.

Use with :method:`hint() <cursor.hint>` to force MongoDB to use a
specific query.

Explain Output
~~~~~~~~~~~~~~

.. code-block:: javascript
   :emphasize-lines: 2, 4-6, 9-10

   {
      "cursor" : "BtreeCursor x_1",
      "isMultiKey" : false,
      "n" : 50,
      "nscannedObjects" : 0,
      "nscanned" : 50,
      "nscannedObjectsAllPlans" : 0,
      "nscannedAllPlans" : 50,
      "scanAndOrder" : false,
      "indexOnly" : true,
      "nYields" : 0,
      "nChunkSkips" : 0,
      "millis" : 0,
      "indexBounds" : {
            "x" : [ [ -1.7976931348623157e+308, 50 ] ]
      }
   }

Profiling
~~~~~~~~~

The profiler records output to :data:`<database>.system.profile`.

Use :setting:`slowms` to only profile longer running operations.

Profiler Methods
~~~~~~~~~~~~~~~~

In the :program:`mongo` shell:

- :method:`db.getProfilingStatus() <db.getProfilingStatus>`
- :method:`db.setProfilingLevel() <db.setProfilingLevel>`

Profiler Output: Query (First)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   {
     "op" : "query",
     "ns" : "test.foo",
     "query" : { "r" : { "$gt" : 0.4 }, "x" : 4 },
     "ntoreturn" : 0,
     "ntoskip" : 0,
     "nscanned" : 6001,
     "nscannedObjects" : 6001,
     "keyUpdates" : 0,
     "numYield" : 0,
     "lockStats" : { "timeLockedMicros" : {
                         "r" : NumberLong(1574),
                         "w" : NumberLong(0) },
                     "timeAcquiringMicros" : {
                         "r" : NumberLong(15),
                         "w" : NumberLong(3) } },
   // ...

Profiler Output: Query (Second)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   // ...
     "nreturned" : 5,
     "responseLength" : 240,
     "millis" : 1,
     "execStats" : {
        "type" : "COLLSCAN",
        "works" : 6003,
        "yields" : 46,
        "unyields" : 46,
        "invalidates" : 0,
        "advanced" : 5,
        "needTime" : 5997,
        "needFetch" : 0,
        "isEOF" : 1,
        "docsTested" : 6001,
        "children" : [ ] },
     "ts" : ISODate("2014-03-11T00:49:16.122Z") }

Profile Output: Insert
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   {  "op" : "insert",
      "ns" : "test.foo",
      "ninserted" : 0,
      "keyUpdates" : 0,
      "numYield" : 0,
      "lockStats" : { "timeLockedMicros" : {
                           "r" : NumberLong(0),
                           "w" : NumberLong(962) },
                      "timeAcquiringMicros" : {
                           "r" : NumberLong(0),
                           "w" : NumberLong(63) } },
      "millis" : 1,
      "execStats" : { },
      "ts" : ISODate("2014-03-11T00:43:32.581Z"),
   }

Profile Output: Update
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   {   "ts" : ISODate("2012-12-10T19:31:28.977Z"),
       "op" : "update",
       "ns" : "test.foo",
       "query" : { "x" : { "$lt": 5, "$gt 1" } },
       "updateobj" : {
           "$set" : {  "y" : [ 1, 3 ]  },
       "nscanned" : 8,
       "moved" : true,
       "nmoved" : 1,
       "nupdated" : 1,
       "keyUpdates" : 0,
       "numYield" : 0,
       "lockStats" : { "timeLockedMicros" : {
                           "r" : NumberLong(0),
                           "w" : NumberLong(258) },
                       "timeAcquiringMicros" : {
                           "r" : NumberLong(0),
                           "w" : NumberLong(7) } },
       "millis" : 0 }

.. _indexing:

Indexes
-------

Properties
~~~~~~~~~~

- ordered

- compact

A classic trade between read performance and both storage space as
well as write performance.

Unless a query can use an index *every* query must inspect *every*
document in a collection.

Create Indexes
~~~~~~~~~~~~~~

Single
``````

.. code-block:: javascript

   db.records.ensureIndex( { x: 1 } )
   db.records.ensureIndex( { x: -1 } )
   db.records.ensureIndex( { x: "hash" } )
   db.records.ensureIndex( { content: "text" } )
   db.records.ensureIndex( { loc: "2dsphere" } )
   db.records.ensureIndex( { loc: "2d" } )

Compound
````````

.. code-block:: javascript

   db.records.ensureIndex( { x: 1, r: -1 } )
   db.records.ensureIndex( { x: -1, r: 1 } )
   db.records.ensureIndex( { x: 1, content: "text" } )
   db.records.ensureIndex( { content: "text", x: 1 } )
   db.records.ensureIndex( { loc: "2dsphere", x: 1 } )
   db.records.ensureIndex( { x: 1, r: 1, y: 1, z: 1 } )

Aside: Arrays
~~~~~~~~~~~~~

.. code-block:: javascript

   { "_id": ObjectId(...), "x": 1 }
   { "_id": ObjectId(...), "x": [ 1, 3, 4, 5 ] }
   { "_id": ObjectId(...), "x": [ { a: 1 }, { a: 2 } ] }

Query Design
------------

Selectivity
~~~~~~~~~~~

.. code-block:: javascript

   { "_id": ObjectId(...), "x": 1 }
   { "_id": ObjectId(...), "x": 4 }
   { "_id": ObjectId(...), "x": 4 }
   { "_id": ObjectId(...), "x": 4 }
   { "_id": ObjectId(...), "x": 6 }
   { "_id": ObjectId(...), "x": 10 }

.. code-block:: javascript

   db.records.find( { x: 1 } )

.. code-block:: javascript

   db.records.find( { x: { $lt: 5 } } )
   db.records.find( { x: { $gt: 3 } } )

.. code-block:: javascript

   db.records.find( { x: { $ne: 1 } } )
   db.records.find( { x: { $nin: [ 1, 4, 8 ] } } )

Indexed Query
~~~~~~~~~~~~~

.. code-block:: javascript

   db.foo.ensureIndex({ x: 1 })
   db.foo.find( { x: 1 } ).explain()
   {
     "cursor" : "BtreeCursor x_1",
     "isMultiKey" : false,
     "n" : 1,
     "nscannedObjects" : 1,
     "nscanned" : 1,
     "nscannedObjectsAllPlans" : 1,
     "nscannedAllPlans" : 1,
     "scanAndOrder" : false,
     "indexOnly" : false,
     "nYields" : 0,
     "nChunkSkips" : 0,
     "millis" : 0,
     "indexBounds" : {
           "x" : [ [ 1, 1 ] ]
     }
   }

Collection Scan
~~~~~~~~~~~~~~~

.. code-block:: javascript

   db.foo.find( { x: 4 } ).hint( { "$natural": 1 } ).explain()
   {
     "cursor" : "BasicCursor",
     "isMultiKey" : false,
     "n" : 7,
     "nscannedObjects" : 7001,
     "nscanned" : 7001,
     "nscannedObjectsAllPlans" : 7001,
     "nscannedAllPlans" : 7001,
     "scanAndOrder" : false,
     "indexOnly" : false,
     "nYields" : 54,
     "nChunkSkips" : 0,
     "millis" : 3,
   }

Partially Indexed Query
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

   db.foo.find( { x:  { $lt: 50 } , r: { $gt: 0.5 } }).explain()
   {
      "cursor" : "BtreeCursor x_1",
      "isMultiKey" : false,
      "n" : 33,
      "nscannedObjects" : 50,
      "nscanned" : 50,
      "nscannedObjectsAllPlans" : 100,
      "nscannedAllPlans" : 100,
      "scanAndOrder" : false,
      "indexOnly" : false,
      "nYields" : 0,
      "nChunkSkips" : 0,
      "millis" : 0,
      "indexBounds" : {
            "x" : [ [ -1.7976931348623157e+308, 50 ] ]
      }
   }

Compound Indexes
~~~~~~~~~~~~~~~~

.. code-block:: javascript

   { "_id" : ObjectId("..."), "x" : 1, "r" : 7.995197917334735 }
   { "_id" : ObjectId("..."), "x" : 2, "r" : 8.346089543774724 }
   { "_id" : ObjectId("..."), "x" : 3, "r" : 1.0692091844975948 }
   { "_id" : ObjectId("..."), "x" : 4, "r" : 7.634423221461475 }
   { "_id" : ObjectId("..."), "x" : 5, "r" : 6.345751849003136 }
   { "_id" : ObjectId("..."), "x" : 6, "r" : 4.27855022251606 }
   { "_id" : ObjectId("..."), "x" : 7, "r" : 9.99768219422549 }
   { "_id" : ObjectId("..."), "x" : 8, "r" : 6.721330899745226 }
   { "_id" : ObjectId("..."), "x" : 9, "r" : 3.34314598236233 }
   { "_id" : ObjectId("..."), "x" : 10, "r" : 2.509972183033824 }

.. code-block:: javascript

   db.foo.ensureIndex( { x: 1, r: 1 } )
   db.foo.find( { x: { $lt: 5 } } )
   db.foo.find( { x: { $lt: 5 }, r: { $gt: 5 } } )

.. code-block:: javascript

   db.foo.find( { r: { $gt: 5 } } )

Covered Queries
~~~~~~~~~~~~~~~

Not covered:

.. code-block:: javascript

   db.records.ensureIndex( { x: 1, y: 1 } )
   db.records.find( { x: { $gt: 5 }, y: { $lt: 4 } }, { y: 1 } )

Covered:

.. code-block:: javascript

   db.records.ensureIndex( { x: 1, y: 1 } )
   db.records.find( { x: { $gt: 5 }, y: { $lt: 4 } }, { _id: 0, x: 1 } )

Covered Query Example
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript
   :emphasize-lines: 11

   db.foo.find( { x:  { $lt: 50 } }, { x: 1, _id: 0} ).explain()
   {
      "cursor" : "BtreeCursor x_1",
      "isMultiKey" : false,
      "n" : 50,
      "nscannedObjects" : 0,
      "nscanned" : 50,
      "nscannedObjectsAllPlans" : 0,
      "nscannedAllPlans" : 50,
      "scanAndOrder" : false,
      "indexOnly" : true,
      "nYields" : 0,
      "nChunkSkips" : 0,
      "millis" : 0,
      "indexBounds" : {
            "x" : [ [ -1.7976931348623157e+308, 50 ] ]
      }
   }

.. _other-factors:

Other Factors Affecting Performance
-----------------------------------

Non-Sequential  I/O is a Challenge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Database throughput depends on the I/O throughput of the storage
system.

- Use SSDs.

- Use RAID 1+0 (i.e. 10) with HDDs.

- Lower Disk Readahead.

See: `Production Notes <http://docs.mongodb.org/manual/administration/production-notes/>`_

Filesystems
~~~~~~~~~~~

MongoDB preallocates files.

Recommendations:
````````````````

- Use ``ext4`` or ``xfs``. (Avoid ``ext3``)

- Always set ``noatime``.

.. _sharded-clusters:

Sharded Clusters
~~~~~~~~~~~~~~~~

Sharding distributes a single logical data set across a group of
``mongod`` instances. Sharding:

- Adds complexity: not worthwhile for small and mid-sized data sets.

- If your application will require a sharded cluster, begin sharding
  early.

.. _more-questions:

More Questions...
-----------------

Thank You!
----------
